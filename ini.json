{
	"Clear": {
		"prefix": ".",
		"body": [
			"\"Clear\", \"//input[@id='${1:id}']\""
		],
		"description": "Used to clear the text of a textbox element"
	},
	"Click": {
		"prefix": ".Click",
		"body": [
			"\"Click\", \"//input[@id='${1:elementid}']\",[optional]clicktype"
		],
		"description": "Used to click an element on the page."
	},
	"DragAndDropToOffset": {
		"prefix": ".DragAndDropToOffset",
		"body": [
			"\"DragAndDropToOffset\", \"//*[@data-tag='${1:element}']\", \"42\", \"12\""
		],
		"description": "Drag and drop an element to location at offsetX, offsetY"
	},
	"Hover": {
		"prefix": ".Hover",
		"body": [
			"\"Hover\", \"//*[@id='${1:elementid}']\""
		],
		"description": "Hover over an element on the page"
	},
	"MouseDown": {
		"prefix": "MouseDown",
		"body": [
			"\"MouseDown\", \"//*[@data-tag='${1:element}']\""
		],
		"description": "Emulate mouse down event on an element on the page"
	},
	"MouseUp": {
		"prefix": "MouseUp",
		"body": [
			"\"MouseUp\", \"//*[@data-tag='${1:element}']\""
		],
		"description": "Emulate mouse up event on an element on the page"
	},
	"TypeKeys": {
		"prefix": "TypeKeys",
		"body": [
			"\"TypeKeys\", \"//input[@id='${1:elementid}']\", \"\"5\"\""
		],
		"description": "Type given keys at an element"
	},
	"WaitForExistence": {
		"prefix": "WaitForExistence",
		"body": [
			"\"WaitForExistence\", \"//*[@data-tag='${1:element}'][1]/a\", \"${2:bool}\", \"${3:timer}\""
		],
		"description": "Wait for a given element to exist or not. First parameter is Boolean value of whether it should exist or not. Second parameter is the timeout in milliseconds to wait for."
	},
	"WaitForVisibility": {
		"prefix": "WaitForVisibility",
		"body": [
			"\"WaitForVisibility\", \"//*[@data-partnertag='${1:element}']\",\"${2:bool}\",\"${3:timer}\""
		],
		"description": "Wait for a given element to become visible or not. First parameter is Boolean value of whether it should be visible or not. Second parameter is the timeout in milliseconds to wait for.When animation is involved or element that fetches images via background-image or src attribute you should instead use the WaitForEvent interaction."
	},
	"WaitForScript": {
		"prefix": "WaitForScript",
		"body": [
			"\"WaitForScript\", \"//body\", \"_ge('${1:element}').style.cssText += 'transition: none !important'\", \"0\", \"${3:timer}\""
		],
		"description": "Try to execute the given JavaScript until either the script returns null, the script returns the expected value (second to last parameter), or the timeout in milliseconds is reached (final parameter)."
	},
	"WaitForEvent": {
		"prefix": "WaitForEvent",
		"body": [
			"\"WaitForEvent\", \"//body\", \"${1:event}\", \"${2:bool}\", \"${3:timer}\""
		],
		"description": "Wait until the specified event is fired using sj_evt.fire."
	},
	"Refresh": {
		"prefix": "Refresh",
		"body": [
			"\"Refresh\""
		],
		"description": "Refresh the session"
	},
	"NavigateTo": {
		"prefix": "NavigateTo",
		"body": [
			"\"NavigateTo\", \"//body\", \"${1:link} \""
		],
		"description": "Navigate to a specific absolute Url"
	},
	"NavigateBack": {
		"prefix": "NavigateBack",
		"body": [
			"\"NavigateBack\""
		],
		"description": "Navigate back in the session"
	},
	"NavigateForward": {
		"prefix": "NavigateForward",
		"body": [
			"\"NavigateForward\""
		],
		"description": "Navigate forward in the session"
	},
	"ExecuteScript": {
		"prefix": "ExecuteScript",
		"body": [
			"\"ExecuteScript\", \"//body\", \"${1:script}\""
		],
		"description": "Execute custom JavaScript on the page. The script will execute only once."
	},
	"SetBrowserWindowSize": {
		"prefix": "SetBrowserWindowSize",
		"body": [
			"\"SetBrowserWindowSize\", \"//body\", \"${1:width}\", \"${2:height}\""
		],
		"description": "Change the size of the browser window to width, height"
	},
	"RemoveCookie": {
		"prefix": "RemoveCookie",
		"body": [
			"\"RemoveCookie\", \"//body\", \"${1:cookieName}\", \"${2:cookiePath}\", \"${3:cookieDomain}\""
		],
		"description": "Removes a cookie from the current session. Does not support removal of secure or HTTP-only cookies as well as cookies from a different domain. Cookie names are case insensitive."
	},
	"Rotate": {
		"prefix": "Rotate",
		"body": [
			"\"Rotate\", \"//body\", \"ScreenOrientation.${1:desiredOrientation}\""
		],
		"description": "Rotate the device orientation. Requires on-device testing"
	},
	"ScrollBy": {
		"prefix": "ScrollBy",
		"body": [
			"\"ScrollBy\", \"//body\", \"${1:xPixels}\", \"${2:yPixels}\""
		],
		"description": "Scroll the page by x, y pixels"
	},
	"Swipe": {
		"prefix": "Swipe",
		"body": [
			"\"Swipe\", \"//body\", \"${1:startX}\", \"${2:startY}\", \"${3:endX}\", \"${4:endY}\""
		],
		"description": "Swipe the screen at startX, startY, endX, endY, and (optional) duration. Requires on-device testing"
	},
	"AjaxSerpRequery": {
		"prefix": "AjaxSerpRequery",
		"body": [
			"\"AjaxSerpRequery\", \"//body\" [,\"&${1:element}=${2:element}\"]"
		],
		"description": "Trigger a re-query to force rendering with Ajax Serp. If the optional third parameter is not included, the re-query will use all of the query parameters from the initial request. Use the third parameter to override the initial parameters with new values or add new parameters."
	},
	"WaitForCssAnimations": {
		"prefix": "WaitForCssAnimations",
		"body": [
			"\"WaitForCssAnimations\""
		],
		"description": "Waits until all running CSS animations complete. See the Animation Extensions documentation for more info."
	},
	"WaitForCssTransitionToEnd": {
		"prefix": "WaitForCssTransitionEnd",
		"body": [
			"\"WaitForCssTransitionEnd\", \"//body\", \"[data-tag=${1:element}.${2:element}]\""
		],
		"description": "Waits until a TransitionEnd event is detected. This event is triggered when an element's CSS properties are changed and it has a transition applied to its style. See the Animation Extensions documentation for more info."
	},
	"WaitForDomMutationEvent": {
		"prefix": "WaitForDomMutationEvent",
		"body": [
			"\"WaitForDomMutationEvent\", \"//body\", \"[data-tag=${1:element}.${2:element}]\""
		],
		"description": "Waits until a Dom Mutation event is detected. This occurs when any property or attribute of the specified DOM element is changed or a child is added to or remove from its child list. See the Animation Extensions documentation for more info."
	},

	"DataTag": {
		"prefix": "data-tag",
		"body": [
			"//*[@data-tag='${1:element}']"
		],
		"description": "Code-completes a data-tag"
	},

	"DataPartnerTag": {
		"prefix": "data-partnertag",
		"body": [
			"//*[@data-partnertag='${1:element}']"
		],
		"description": "Code-completes a data-partnertag"
	},

	"Common": {
		"prefix": "'common'",
		"body": [
			"common.'${1:element}'"
		],
		"description": ""
	}

}